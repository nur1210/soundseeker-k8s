apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  namespace: {{ .Values.appName }}
  labels:
    app: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
      labels:
        app: {{ .Values.appName }}
    spec:
      containers:
        - name: {{ .Values.appName }}
          image: nurnechushtan/song_service:36ad85828b09addef57c9c553c25436d8b1a7237
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 50051
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: database-url
            - name: RABBITMQ_HOST
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: rabbitmq-host
            - name: RABBITMQ_PORT
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: rabbitmq-port
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: rabbitmq-username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: rabbitmq-password
            - name: RABBITMQ_VIRTUAL_HOST
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: rabbitmq-virtual-host
      restartPolicy: Always
      imagePullSecrets:
        - name: regcred
      